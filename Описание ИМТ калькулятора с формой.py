# Создаём виджет Frame для контроля за расположением элементов
# В окне приложения необходимо разместить несколько элементов с нашего эскиза: два поля ввода информации с подписями и одну кнопку. Важно, чтобы поля не накладывались друг на друга и не уходили за пределы окна. В Tkinter для этого есть несколько методов:
#
# pack — используется, когда мы работаем с контейнерами для элементов. Позволяет позиционировать кнопки, надписи или другие элементы внутри контейнеров.
# place — позволяет позиционировать элементы, указывая точные координаты.
# grid — размещает элементы по ячейкам условной сетки, разделяющей окно приложения.
# Мы воспользуемся комбинацией методов pack и grid. Для начала создадим виджет Frame для размещения надписей, полей ввода и кнопок. Подробное описание работы виджета есть в документации. Мы же используем только два свойства: padx и pady.
#
# Обозначим отступы по вертикали и горизонтали в 10 пикселей для элементов, которые будут расположены внутри Frame:
#
# frame = Frame(
#    window, #Обязательный параметр, который указывает окно для размещения Frame.
#    padx = 10, #Задаём отступ по горизонтали.
#    pady = 10 #Задаём отступ по вертикали.
# )
# frame.pack(expand=True) #Не забываем позиционировать виджет в окне. Здесь используется метод pack. С помощью свойства expand=True указываем, что Frame заполняет весь контейнер, созданный для него.
# Шаг 5
# Добавляем поля ввода информации и кнопку запуска расчёта индекса массы тела
# В окне приложения нам необходимо добавить три вида виджетов: поле для ввода информации (Entry), текстовые надписи (Label) и кнопку (Button).
#
# Начнём с надписей. Воспользуемся виджетом Label:
#
# height_lb = Label(
#    frame,
#    text="Введите свой рост (в см)  "
# )
# height_lb.grid(row=3, column=1)
# Мы передаём виджету Label два параметра:
#
# frame — используем заготовку виджета Frame, в которой уже настроены отступы по вертикали и горизонтали.
# text — текст, который должен быть выведен на экран.
# Для позиционирования виджета используем метод grid. Укажем, что текст должен располагаться в ячейке с координатами «3-я строка, 1-й столбец». Если запустим код, то увидим там единственный элемент:
#
#
# Скриншот: Tkinter / Skillbox Media
# Сейчас элемент расположен в центре окна, но он займёт правильное положение, когда мы напишем другие элементы.
#
# Добавим вторую надпись о весе аналогичным образом, но при позиционировании в grid укажем следующую, четвёртую строку:
#
# weight_lb = Label(
#    frame,
#    text="Введите свой вес (в кг)  ",
# )
# weight_lb.grid(row=4, column=1)
# Запускаем код и смотрим на результат:
#
#
# Скриншот: Tkinter / Skillbox Media
# Теперь добавим поля для ввода пользовательской информации, используя виджет Entry:
#
# height_tf = Entry(
#    frame, #Используем нашу заготовку с настроенными отступами.
# )
# height_tf.grid(row=3, column=2)
# Для позиционирования мы также воспользовались методом grid. Обратите внимание, что наш элемент должен быть расположен напротив надписи «Введите свой рост (в см)». Поэтому мы используем ячейку в той же строке, но уже во втором столбце. Запустим код и посмотрим на результат:
#
#
# Скриншот: Tkinter / Skillbox Media
# Всё получилось. Остаётся по аналогии добавить поле ввода веса:
#
# weight_tf = Entry(
#    frame,
# )
# weight_tf.grid(row=4, column=2, pady=5)
# Посмотрим на результат:
#
#
# Скриншот: Tkinter / Skillbox Media
# Теперь добавим кнопку, которая будет запускать расчёт ИМТ. Сделаем это с помощью виджета Button:
#
# cal_btn = Button(
#    frame, #Заготовка с настроенными отступами.
#    text='Рассчитать ИМТ', #Надпись на кнопке.
# )
# cal_btn.grid(row=5, column=2) #Размещаем кнопку в ячейке, расположенной ниже, чем наши надписи, но во втором столбце, то есть под ячейками для ввода информации.
# Посмотрим на результат:
#
#
# Скриншот: Tkinter / Skillbox Media
# Теперь в приложении есть все графические элементы. Остаётся лишь написать код, который будет получать информацию из виджетов Entry и рассчитывать индекс массы тела.
#
# Шаг 6
# Получаем информацию из виджетов Entry и рассчитываем индекс массы тела
# Напишем простую функцию и разберём её построчно:
#
# def calculate_bmi(): #Объявляем функцию.
#    kg = int(weight_tf.get()) #С помощью метода .get получаем из поля ввода с именем weight_tf значение веса, которое ввёл пользователь и конвертируем в целое число с помощью int().
#    m = int(height_tf.get())/100 #С помощью метода .get получаем из поля ввода с именем height_tf значение роста и конвертируем в целое число с помощью int(). Обязательно делим его на 100, так как пользователь вводит рост в сантиметрах, а в формуле для расчёта ИМТ используются метры.
#    bmi = kg/(m*m)#Рассчитываем значение индекса массы тела.
#    bmi = round(bmi, 1) #Округляем результат до одного знака после запятой.
# Функция готова. Но теперь нам необходимо оценить полученный результат расчёта и вывести сообщение для пользователя.
#
# Шаг 7
# Оцениваем результат и показываем пользователю
# Дополним нашу функцию calculate_bmi. Воспользуемся условным оператором if, чтобы учесть полученные значения ИМТ, и методом Tkinter messagebox для отображения сообщения во всплывающем окне:
#
# if bmi < 18.5:
#        messagebox.showinfo('bmi-pythonguides', f'ИМТ = {bmi} соответствует недостаточному весу')
#    elif (bmi > 18.5) and (bmi < 24.9):
#        messagebox.showinfo('bmi-pythonguides', f'ИМТ = {bmi} соответствует нормальному весу')
#    elif (bmi > 24.9) and (bmi < 29.9):
#        messagebox.showinfo('bmi-pythonguides', f'ИМТ = {bmi} соответствует избыточному весу')
#    else:
#        messagebox.showinfo('bmi-pythonguides', f'ИМТ = {bmi} соответствует ожирению')
# Остаётся последний шаг — наша функция должна запускаться при нажатии на кнопку «Рассчитать ИМТ». Для этого добавим свойство command в виджет Button:
#
# cal_btn = Button(
#    frame,
#    text='Рассчитать ИМТ',
#    command=calculate_bmi #Позволяет запустить событие с функцией при нажатии на кнопку.
# )
# cal_btn.grid(row=5, column=2)
